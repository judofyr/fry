function add
T: Type
a: T
b: T
return: T
@builtin

function sub
T: Type
a: T
b: T
return: T
@builtin

function mul
T: Type
a: T
b: T
return: T
@builtin

function and
a: Bool
b: Bool
return: Bool
@builtin

function or
a: Bool
b: Bool
return: Bool
@builtin

function set
T: Type
a: T
b: T
@builtin

function throw
@builtin
@throws

struct Coro

function coro
return: Coro
@builtin

function resume
coro: Coro
@builtin

function suspend
@builtin
@suspends

function wait
ms: Int32
@suspends
@js "return setTimeout(cont, ms[0]);"

trait Arr
T: Type
{
  function len
  return: Int32

  function at
  idx: Int32
  return: T
}

struct List
T: Type

function list
T: Type
return: List<T>
@js "return [];"

function listpush
T: Type
list: List<T>
val: T
@js "list.push(val);"

function listlen
T: Type
list: List<T>
return: Int32
@js "return [list.length];"

function listat
T: Type
list: List<T>
idx: Int32
return: T
@js "return list[idx];"

constructor listarr
T: Type
list: List<T>
return: Arr<T>
{
  implement len
  {
    return listlen(T=T, list=list)
  }

  implement at
  {
    return listat(T=T, list=list, idx=idx)
  }
}
